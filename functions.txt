Functions in Cell have no side effects and are referentially transparent, but can be written in either a functional or a procedural style. We'll introduce the functional style first. Here are a few self-explanatory examples:

  Int max(Int x, Int y) = if x >= y then x else y;

  Int factorial(Int n) = if n == 0 then 1 else factorial(n-1);

The signature of function comes first, followed by the {{=}} sign, then an expression that forms the body of the function and a semicolon that terminates the declaration. The type of the arguments and the return type are mandatory. To compare two values for equality just use the {{==}} operator, and to check if they're different use {{!=}}. The if/then/else is a conditional expression, and can have any number of branches (note/NOTICE the use of the {{elif}} keyword):

  <-1..1> sign(Int x) = if x > 0    then  1
                        elif x < 0  then -1
                                    else  0;

Boolean expression can be build using the standard logical connectors {{and}}, {{or}} and {{not}}:

  Bool is_ascii_print(Int char) = char >= 32 and char <= 126;
  Bool is_ascii_upper(Int char) = char >= 65 and char <= 90;
  Bool is_ascii_lower(Int char) = char >= 97 and char <= 122;
  Bool is_ascii_digit(Int char) = char >= 48 and char <= 57;
  Bool is_ascii_alpha(Int char) = is_ascii_upper(char) or is_ascii_lower(char);
  Bool is_ascii_punct(Int char) = char != 32 and is_ascii_print(char) and
                                  not (is_ascii_alpha(char) or is_ascii_digit(char));

Line comments begin with either {{//}} or {{##}}. The two are equivalent, but, by convention, the former should be used for explanations, the latter for comments that require some sort of action, like a todo item, or a bug warning:

  // This is a comment that explains something about a piece of code
  // that works fine and does not require any action

  ## TODO: Handle this case properly
  ## BUG:  This code will fail if xs contains duplicates

Currently there's no support for multiline comments.

We've already seen the syntax for creating sequences. Their elements can of course be arbitrary expressions. The presence of some elements can also be made conditional. In the following examples, the first element is included only if {{n}} is greater than 0:

  Int* nearby(Nat n) = (n - 1 if n > 0, n, n + 1);

The following expressions all evaluates to true:

  nearby(0) == (0, 1)
  nearby(1) == (0, 1, 2)
  nearby(2) == (1, 2, 3)

The conditional inclusion notation applies to all collection types, in all of their syntactic forms: sequences, sets, relations, maps and records. A few examples:

  [Int] nearby_set(Nat n)  = [n - 1 if n > 0, n, n+1];

  (left: Int?, middle: Int, right: Int) nearby_record(Nat n) = (left: n - 1 if n > 0, middle: n, right: n + 1);

  [Int -> Int] nearby_map(Nat n)  = [-1 -> n - 1 if n > 0, 0 -> n, 1 -> n + 1];

  [Int, Int] nearby_bin_rel(Nat n)  = [-1, n - 1 if n > 0; 0, n; 1, n + 1];


Native collection values operations

Collection values have a number of built-in operators, in addition to the user-defined operators we'll see later. To get the size of a collection value, of any kind, just enclose the expression between pipes:

  |any_coll|

If used on a sequence, the above expression will return its length; on a set, the number of (unique) elements it contains; and on a relation the numbers of unique entries.

Sequences support also access by index:

  a_seq(i)    // Access by index

With sets, we have membership test:

  a_set(elt)  // True if "elt}} is an element of "a_set", false otherwise

Binary relations also support partial membership tests:

  a_bin_rel(arg0, arg1)   // Checks whether "a_bin_rel}} contains the entry "arg0, arg1"
  a_bin_rel(arg0, *)      // True if there exists an entry whose first element if arg0, false otherwise
  a_bin_rel(*, arg1)      // True if "a_bin_rel}} contains an entry whose second element is "arg1", false otherwise

and lookups (but note that this syntax is temporary, it will change in a future version of the language):

  a_bin_rel(arg0, !!)   // If "a_bin_rel}} contains one and only one entry whose left element is equal to arg0,
                        // returns the corresponding right element. Fails otherwise.
  a_bin_rel(!!, arg1)   // If "a_bin_rel}} contains one and only one entry whose right element is equal to arg1,
                        // returns the corresponding left element. Fails otherwise

In a future version of the compiler will provide a more compact notation for the first of the above two operations:

  a_map_or_bin_rel(key)   // Same as a_map_or_bin_rel(key, !!)

and this notation is already available for mutable relation variables defined inside static automata (we'll discuss them in the following chapters).

Records support all binary relation and map operations, plus access by field and field membership test:

  a_record.a_field    // Returns the value of "a_field"
  a_record.a_field?   // Return true if "a_record}} has field "a_field", false otherwise

The dot notation can also be used with tagged records. The following code is valid, since values of type {{Point}} are actually tagged records:

  type Point = point(x: Int, y: Int, z: Int?);

  Int x(Point p) = p.x;
  Int z(Point p) = if p.z? then p.z else 0;

It can also be used with union types, as long as all types are records or tagged records and they all have the particular field that whose value is being looked up:

  type MyUnionType = (field1: Int, field2: String), tagged_rec(field1: Float, field3: Int);

  <Int, Float> get_field1(MyUnionType value) = value.field1;

Ternary relations support the same native operations as binary relations, but with three arguments instead of two in the case of membership tests and lookups:

  a_tern_rel(arg0, arg1, arg2)  // True if "a_tern_rel}} includes the triple "arg0, arg1, arg2", false otherwise
  a_tern_rel(arg0, *, arg2)     // Partial membership test, any value for the middle argument will do
  a_tern_rel(*, arg1, *)        // Partial membership test, any pair of values for left and right arguments will do

  a_tern_rel(!!, arg1, arg2)    // Look up the corresponding values in the first, second or third
  a_tern_rel(arg0, !!, arg2)    // columns respectively, if those values exist and are unique.
  a_tern_rel(arg0, arg1, !!)    // Fail otherwise


Sequence comprehension

Say you want to apply a certain operation to all elements of a sequence:

  Int* square_all(Int* xs) = (x * x : x <- xs);

  // square_all(())              == ()
  // square_all((0, 1, 2, 3, 4)) == (0, 1, 4, 9, 16)

You can access not just the value of each element of the sequence, but also their indexes:

  Int* elem_plus_index(Int* xs) = (x + i : x @ i <- xs);

  // elem_plus_index((10, 20, 30, 40)) == (10, 21, 32, 43);

You can add a filter expression:

  Int* only_nonzero_elements(Int* xs) = (x : x <- xs, x != 0);

  // only_nonzero_elements((2, 1, 0, 4, 0, 3)) == (2, 1, 4, 3)

If the sequence contains tuples, you can destructure them:

  Int* sum_triples((Int, Int, Int) ts) = (x + y + z : x, y, z <- ts);

  // sum_triples(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == (6, 15, 24)

And you can of course combine all the above features:

  Int* weird_function((Int, Int) ts) = (2 * max(x, y) : x, y @ i <- ts, x > i and y > i);

  // weird_function(((2, 4), (5, 2), (3, 1), (7, 4), (2, 6)) == (8, 10, 14)

You can also build a sequence by iterating over a range of integers instead:

  Int* rotate_left(Int* seq, Int shift) = (seq(mod(i+shift, |seq|)) : i < |seq|);

  // rotate_left((100, 101, 102, 103, 104), 2) == (102, 103, 104, 100, 101)

The index variable {{i}} goes from 0 to {{|seq|-1}}. You can include the last value by using {{<=}} instead of {{<}}:

  Int* insert_right(Int* seq, Int elt) = (if i == |seq| then elt else seq(i) : i <= |seq|);

  // insert_right((100, 101, 102), 103) == (100, 101, 102, 103)

Note that the above example (and many of those that follow) is just that, an example, and not the recommended way to write that function. The following implementation is logically equivalent, but a lot more efficient (when used properly, it runs in amortized O(1)):

  Int* insert_right(Int* seq, Int elt) = (seq | elt);

(Of course, there's no point in defining such a function, since it's just easier to use the {{(xs | x)}} notation directly). We'll say more about functional concatenation in the next chapter, when we talk about imperative programming.


Set/relation/map comprehension

Comprehension can be applied to sets and relations as well. It's similar but a bit more complex. You can have multiple source expressions, multiple filters and more. Let's start by creating functions that merge two sets of values:

  [T] set_union([T] set1, [T] set2) = [x : x <- set1 | x <- set2];

The source expression {{x <- set1 | x <- set2}} iterates through all the elements of both {{set1}} and {{set2}}. The iteraction is done in an unspecified order (since sets and relations are unordered collections), and all duplicates in the result are of course eliminated. Any single-letter uppercase symbol like the {{T}} that appears in the signature of {{set_union()}} is a type variables that can represent any type. Type variables are used for generic programming, and they are needed to preserve type information: if the above function is used, for instance, to merge two sets of integers, the typechecker will be able to figure out that the result, too, will be a set of integers. We'll discuss them in detail in another chapter. Merging relations is very similar:

  [A, B] bin_rel_union([A, B] r1, [A, B] r2) = [x, y : x, y <- r1 | x, y <- r2];

  [A, B, C] tern_rel_union([A, B, C] r1, [A, B, C] r2) = [x, y, z : x, y, z <- r1 | x, y, z <- r2];

Maps have a specific form of comprehension, that works in exactly the same way as binary relation comprehension, but will refuse to produce values that are not maps: if the resulting relation has duplicate keys, the computation will just fail. The only syntactic difference is that the comma between the two expression before the {{:}} is replaced with a {{->}}. Here's how you define the map version of union:

  [A -> B] map_union([A -> B] m1, [A -> B] m2) = [x -> y : x, y <- r1 | x, y <- r2];

You can also define a function that can merge any number of sets:

  [T] sets_union([[T]] sets) = [x : s <- sets, x <- s];

The above function iterates through all the sets in {{sets}}, and for each set, it iterates through all the elements. You can of course define similar functions for relations or maps.
This is a function that generates a binary relation that is the cartesian product of two sets:

  [A, B] cartesian_product([A] s1, [B] s2) = [x, y : x <- s1, y <- s2];

The function iterates through all the elements in the first set and, for each of them, it iterates through the elements of the second set, and it ends up producing all the combinations.

Set/relation comprehension expressions can iterate through sequences as well. The following function turns a sequence into a set:

  [T] set(T* s) = [x : x <~ s];

When the source is a sequence, rather than a set or a relations, you need to use the {{<~}} arrow instead of {{<-}} and the same index variable and tuple destructuring functionalities that we saw for sequence comprehension are available. An example:

  [Nat, A, B] pair_seq_to_indexed_tern_rel((A, B)* seq) = [i, x, y : x, y @ i <~ seq];

Just like with sequences we can have filter clauses, but here we can have more than one and they can be intermixed with generators. The following function produces the cartesian product of two sets of integers, but it filters out all negative integers from either set:

  [Int, Int] cart_prod_non_neg([Int] xs, [Int] ys) = [x, y : x <- xs, x >= 0, y <- ys, y >=0];

You can also calculate a new value and assign it to a variable inside the loop. The following expression iterates through all the elements of {{xs}}, stores the value of {{f(x)}} in {{y}}, skips the iteraction when {{p(y)}} is false, and finally inserts the value of {{g(x, y)}} in the output set.

  [g(x, y) : x <- xs, y = f(x), p(y)]

There's one more type of clause that you can use in set/relation comprehension expression, but we'll defer its discussion until we've examined pattern matching.

You can also iterate through a projection of a relation, that is, a subset of it obtained by filtering it based on the value of some of the arguments. The following pairs of expressions are all equivalent, but the ones on the left are a lot faster, because they don't need to do a linear scan of the entire relation:

  [y : y <- bin_rel(x0, ?)]                 [y : x, y <- bin_rel, x == x0]
  [x : x <- bin_rel(?, y0)]                 [x : x, y <- bin_rel, y == y0]

  [y, z : y, z <- tern_rel(x0, ?, ?)]       [y, z : x, y, z <- tern_rel, x == x0]
  [x, y : x, z <- tern_rel(?, y0, ?)]       [x, z : x, y, z <- tern_rel, y == y0]
  [x, y : x, y <- tern_rel(?, ?, z0)]       [x, y : x, y, z <- tern_rel, z == z0]

  [x : x <- tern_rel(?, y0, z0)]            [x : x, y, z <- tern_rel, y == y0, z == z0]
  [y : y <- tern_rel(x0, ?, z0)]            [y : x, y, z <- tern_rel, x == x0, z == z0]
  [z : z <- tern_rel(x0, y0, ?)]            [z : x, y, z <- tern_rel, x == x0, y == x0]


Operators

This is the list of all cell operators, in order of decreasing precedence:

  and or
  not
  == != ::
  < > <= >=
  + - (binary) &
  * /
  - (unary)
  ^
  [] ()
  .

Note that there are two versions of the {{-}} operator, the unary and binary ones.
All binary operators associate from left to right, except for those that don't associate at all:

  ^ == != ::   // Non-associative binary operators

The arithmetic and comparison operators {{+}} {{-}} {{*}} {{/}} {{<}} {{>}} {{<=}} {{>=}} have the obvious meanings, and are defined for any combination of integers and floating point numbers. The binary {{-}} is also used to denote set difference. The exponentiation operator {{^}} is too defined for any combination of integers and floating point numbers, but it always returns a floating point number.
The :: operator is used to test if a value belongs to a type, and returns a boolean value:

  my_var :: MyType  // True if the value of "my_var}} belongs to "MyType", false otherwise

The operator {{&}} is defined as concatenation for sequences and strings, union for sets and merge for maps. In the case of maps it fails if the two maps have common keys (unless those duplicate keys map to the same values).

The following operators can be overloaded: {{+}}, {{-}}, {{*}}, {{/}}, {{^}}, {{<}}, {{>}}, {{<=}}, {{>=}}, {{&}}, {{[]}}. In order to overload them, they have to be treated like normal functions with the following names:

  -     (-_)      // Unary minus
  +     (_+_)
  -     (_-_)     // Binary minus
  *     (_*_)
  /     (_/_)
  ^     (_^_)
  <     (_<_)
  >     (_>_)
  <=    (_<=_)
  >=    (_>=_)
  &     (_&_)
  []    (_[_])

The "function}} names are formed by the operator itself, with underscores where the operands should be, all enclosed in parentheses. As an example, let's define the operators {{+}}, {{*}} and unary {{-}} for boolean, as synonyms for {{or}}, {{and}} and {{not}} respectively:

Bool (_+_) (Bool b1, Bool b2) = b1 or b2;
Bool (_*_) (Bool b1, Bool b2) = b1 and b2;
Bool  (-_) (Bool b)           = not b;

Let's also define the operator {{[]}} for sequences, as a synonym of {{()}}:

T (_[_]) (T* xs, Int i) = xs(i);


Closures

Cell has support for closures, although it is very limited compared to what truly functional languages like Haskell (or even some object-oriented languages) can offer. The only thing you can do with closures at the moment is pass them as parameters to a function. This is the definition of one staple of every functional programming language, the {{map()}} function (note that it's just syntactic sugar for sequence comprehension, so it's not particularly useful in and of itself. It's just an example):

  B* map(A* s, (A -> B) f) = (f(x) : x <- s);

The second argument to the {{map(..)}} function is a closure that takes an argument of a generic type {{A}} and returns a value of another generic type {{B}}. That closure is applied to each element of {{s}} in turn. The type {{(A -> B)}} is a closure type. For a closure with multiple arguments, the general form of its type is:

  (A -> R)
  (A1 A2 -> R)
  (A1 A2 A3 -> R)
  (A1 A2 A3 ... An -> R)

where {{A}}, {{A1}}, {{A2}}, ... {{An}} are the types of the argument(s), and {{R}} is the type of the result. The only place where closure types can appear is in the argument list of a function. A function cannot return a closure, and type definitions cannot make use of closure types, since regular data and closures cannot be mixed. Also, a closure cannot take other closures in turn as parameters: all of its arguments have to be regular values.
Here are a few examples of how you can call a function that takes a closure argument:

  Int* increment_all(Int* xs)       = map(xs, $ + 1);   // Same as (x + 1 : x <- xs)
  Int* multiply_all(Int* xs, Int y) = map(xs, $ * y);   // Same as (x * y : x <- xs)
  Int* square_all(Int* xs)          = map(xs, square);  // Same as (square(x) : x <- xs)

  Int square(Int x) = x * x;  // Auxiliary function used in the square_all(..) example

  [B*] map2([A*] ss, (A -> B) f) = [map(s, f) : s <- ss];  // Same as [(f(x) : x <- s) : s <- ss]

The are two ways to provide a closure argument in a function call. The first option, if you don't need to capture any local variable, is to just pass the name of an existing function or closure. That's what {{square_all(..)}} and {{map2(..)}} do. The other option is to simply write the expression that constitutes the body of the closure, like in {{increment_all(..)}} and {{multiply_all(..)". Inside that expression you can use local variables (which will be captured by the closure) and you can refer to the argument of the closure with the symbol {{$}}, or {{$a}}, {{$b}}, {{$c}}... if the closure has more than one argument.


Pattern matching

When writing a function over a union type, you may want to provide a different implementation for each of the cases in the union. There are two ways to do that: one is to write a set of polymorphic functions, the other is to use pattern matching. We'll postpone a discussion of the former until later, and describe the latter here. One of the simplest examples we have is the Maybe type. Let's say we want to write a function that applies a closure to the value contained inside, or do nothing is there's no value at all:

  // type Maybe[T]  = nothing, just(T);

  Maybe[B] apply(Maybe[A] m, (A -> B) f) =
    match (m)
      nothing   = :nothing,
      just(x?)  = :just(f(x));

The match expression takes a value and compares it sequentially to any number of patterns. In the above expression, both {{nothing}} (the one on the left) and {{just(x?)}} are patterns. During evaluation the value being inspected (in this case {{m}}) is matched against each pattern in the order in which they appear, until a match is found: when that happens the corresponding expression on the right is evaluated, and its value becomes the value of the whole match expression. If no match is found, the execution fails (what happens after that depends on the context, and we'll talk about that later). Note that more than one pattern may be able to match a given value, but the search stops at the first one: the other ones are ignored.
Every pattern matches a (possibly infinite) set of values, and may bind new variables. The pattern {{nothing}}, for example, matches one and only one value, the symbol {{nothing}}. This is true in general: every symbol is also a pattern, that matches itself. The second pattern, {{just(x?)}} on the other hand matches any value tagged with the symbol {{just}}. It matches, for example, the values {{just(0)}}, {{just("Hello world!")}}, {{just(day: 27, month: 4, year: 2017)}} or {{just(point(x: 2.5, y: 0.3))}}. The {{x?}} is a pattern variable: if the match succeeds, the value of the variable {{x}} is the value of {{m}} without the tag. In the previous examples, {{x}} would end up containing the values {{0}}, {{"Hello world"}}, {{(day: 27, month: 4, year: 2017)}} and {{point(x: 2.5, y: 0.3)}} respectively.
A match expression can match any number of values, not just one: the following function, for example, applies a two-argument function to the content of two {{Maybe}} values if neither is {{nothing}} and returns the tagged result, or {{nothing}} otherwise:

  Maybe[C] apply(Maybe[A] ma, Maybe[B] mb, (A B -> C) f) =
    match (ma, mb)
      just(a?), just(b?)  = :just(f(a, b)),
      _,        _         = :nothing;

The {{_}} pattern is the catch-all pattern: it matches any value.
When match expressions are the topmost expression in a function definition, and when the value that is being matched is the first argument of that function (or the first arguments, if the matching involves more than one value) you can omit the {{match (..)}} part of the expression. The two functions above can be rewritten as follow:

  Maybe[B] apply(Maybe[A] m, (A -> B) f) =
    nothing   = :nothing,
    just(x?)  = :just(f(x));

  Maybe[C] apply(Maybe[A] ma, Maybe[B] mb, (A B -> C) f) =
    just(a?), just(b?)  = :just(f(a, b)),
    _,        _         = :nothing;

Patterns can also match tuples (that is, fixed length sequences):

  (B, A) swap_pair((A, B)) =
    (a?, b?)  = (b, a);

  (C, A, B) rotate_right_once((A, B, C)) =
    (a?, b?, c?)  = (c, a, b);

and tagged values with any tag. The following two functions accept as input any tagged value, and return the untagged value or the tag itself, respectively:

  A untag(<<+>(A)>) =
    t?(v?) = v;

  Symbol tag(<<+>(Any)>) =
    t?(v?)  = t;

Union types often include related but different sets of values, each of which is tagged with a different symbol, and in this case pattern matching may be used not to break up a value, but simply to provide a different implementation for each type in the union:

  type Shape = square(side: Float), rectangle(width: Float, height: Float), circle(radius: Float);

  Float pi = 3.141592653589793;

  Float area(Shape s) =
    square(_)     = s.side ^ 2,
    rectangle(_)  = s.width * s.height,
    circle(_)     = pi * s.radius ^ 2;

In patterns like the one above, you can just omit the catch-all pattern {{_}} inside the parentheses. The {{area(..)}} function can be rewritten as follows:

  Float area(Shape s) =
    square()    = s.side ^ 2,
    rectangle() = s.width * s.height,
    circle()    = pi * s.radius ^ 2;

Patterns can also be nested. A few examples:

  type Point = point(Int, Int);
  type Rect  = rect(Point, Point);

  Int area(Rect) =
    rect(point(x1?, y1?), point(x2?, y2?))  = abs((x1 - x2) * (y1 - y2));

## ADD MORE EXAMPLES

You can also break up a value according to a pattern, and still bind the entire value to a variable, like the following function does: it binds both elements of {{ps}} to a variable, {{p1}} and {{p2}} respectively, and then further breaks up each of them in turn, finally binding the values {{x1}}, {{y1}}, {{x2}}, {{y2}}.

  ((Int, Int), (Int, Int)) sort_two_int_pairs(((Int, Int), (Int, Int)) ps) =
    ((x1?, y1?) p1?, (x2?, y2?) p2?)  = ( if x1 > y1 then (y1, x1) else p1,
                                          if x2 > y2 then (y2, x2) else p2
                                        );

There are other patterns in addition to the ones we've seen so far. Here's a complete list, with the set of values each of them matches:

  <+>     // symbols
  <*..*>  // integers
  <!>     // floating point numbers
  ()      // sequences, both empty and non-empty
  []      // sets, both empty and non-empty
  [,]     // binary relations (including maps and records, of course)
  [->]    // maps (including records)
  [,,]    // ternary relations

The combination of all the above patterns allow us to write universal functions, that is, function that can work on any value, without any prior knowledge about its structure. The following, for example, is a universal function for computing 32-bit hash codes (it's a pretty lame hash function, but never mind that, it's just an example):

  Int div32 = 4294967296;

  Int hashcode(Any value) =
    <+>     = hashcode(_str_(value)),
    <*..*>  = xor(value / div32, mod(value, div32)),
    <!>     = hashcode(_bits_(value)),
    ()      = mod(sum((hashcode(e) : e <- value)), div32),
    []      = mod(sum((hashcode(e) : e <- value)), div32),
    [,]     = mod(sum((hashcode(a) + hashcode(b) : a, b <- value)), div32),
    [,,]    = mod(sum((hashcode(a) + hashcode(b) + hashcode(c) : a, b, c <- value, div32))),
    t?(v?)  = mod(hashcode(t) + hashcode(v), div32);

In the above example, {{_str_}} and {{_bits_}} are builtin functions. The first one takes a symbol and returns a string that represents that symbol (for instance, {{_str_(:january)}} evaluates to {{"january"}}), and {{_bits_}} takes a (64-bit) floating point number and returns the same bit patterns reinterpreted as a 64-bit integer.
Builtin functions always have names that start and end with an underscore, and they provide functionalities that are either impossible to implement directly in Cell, or that cannot implemented efficiently, or that are just convenient to have as builtins for whatever reason. Some of them have aliases in the standard library. The {{&}} operator for sequences, for example, is defined in terms of {{_cat_}} builtin function (doing so will enable a O(1) implementation of sequence concatenation that uses ropes instead of arrays as the underlying physical data structure). Among those that don't have aliases, the following ones can pretty useful:

  _symb_()    // Returns a symbol given its textual representation: _symb_("any_symbol") == :any_symbol
  _isort_()   // Sorts the elements of a set in some implementation-defined order
  _tag_()     // Given a tagged value, returns the tag
  _untag_()   // Given a tagged value, returns the value without the tag
  _print_()   // Returns a string containing the textual representation of any value
  _parse_()   // Given the textual representation of a value returns a Result[Any, Nat]
              // with either the value or the position of the error if parsing fails
